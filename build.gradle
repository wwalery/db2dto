plugins {
  id "net.ossindex.audit" version "0.1.1"
  id 'com.github.sherter.google-java-format' version '0.9'
  id "com.dorongold.task-tree" version "1.3.1"
  id 'checkstyle'
  id "com.github.johnrengelman.shadow" version "5.2.0"
}


apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: "com.github.johnrengelman.shadow"

group = 'org.wwapp'

mainClassName = 'org.wwapp.db2dto.Main'
ext.javaVersion = JavaVersion.VERSION_11

idea.module.downloadJavadoc = true
java {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}



repositories {
    jcenter()
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror" << "-Xlint:all" << "-Xlint:-processing"
}

checkstyle {
  configFile file("checkstyle.xml")
  toolVersion '8.26';
}

tasks.withType(Checkstyle) {
// Specify all files that should be checked
  classpath = files()
  source "${project.rootDir}"

// Define the output folder of the generated reports
  reports {
    html {
      enabled true
      destination rootProject.file("build/reports/checkstyle/checkstyle.html")
    }
    xml {
      enabled true
      destination rootProject.file("build/reports/checkstyle/checkstyle.xml")
    }
  }
}
// Execute Checkstyle on all files
task checkstyle(type: Checkstyle) {
}

task checkstyleChanged(type: Checkstyle) {
    def changedFiles = System.getProperty('changedFiles', '').split(',')
    include changedFiles
}

task checkChanged {
  dependsOn checkstyleChanged
}



dependencies {

// https://mvnrepository.com/artifact/org.projectlombok/lombok
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
  annotationProcessor "org.projectlombok:lombok:1.18.12"
  testImplementation group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
  testAnnotationProcessor "org.projectlombok:lombok:1.18.12"

// https://mvnrepository.com/artifact/com.google.guava/guava
  implementation group: 'com.google.guava', name: 'guava', version: '29.0-jre'

// https://mvnrepository.com/artifact/commons-cli/commons-cli
  implementation group: 'commons-cli', name: 'commons-cli', version: '1.4'

  implementation group: 'io.pebbletemplates', name: 'pebble', version: '3.1.4'

  implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
  implementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

// https://mvnrepository.com/artifact/com.google.code.gson/gson
  implementation group: 'com.google.code.gson', name: 'gson', version: '2.8.6'

// https://mvnrepository.com/artifact/org.reflections/reflections
  implementation group: 'org.reflections', name: 'reflections', version: '0.9.12'


  testImplementation  'junit:junit:4.13'
  
// https://mvnrepository.com/artifact/org.hsqldb/hsqldb
  testImplementation group: 'org.hsqldb', name: 'hsqldb', version: '2.5.1'
// https://mvnrepository.com/artifact/org.hsqldb/sqltool
  testImplementation group: 'org.hsqldb', name: 'sqltool', version: '2.5.1'
  
}

task copyResources(type: Copy) {
  destinationDir = file('./build/libs')
  from('./resources')
}

shadowJar {
  dependsOn copyResources
  baseName = 'db2dto'
  classifier = ''
}


test {
  testLogging {
    events /*"passed", */ "skipped", "failed"
//    events "started", "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
  }
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
    }
  }
}
