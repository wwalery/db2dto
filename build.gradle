plugins {
  id "net.ossindex.audit" version "0.1.1"
  id 'com.github.sherter.google-java-format' version '0.9'
  id "com.dorongold.task-tree" version "1.3.1"
  id 'checkstyle'
  id "com.github.johnrengelman.shadow" version "5.2.0"
}


apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'application'
apply plugin: 'idea'
apply plugin: 'checkstyle'
apply plugin: 'maven-publish'
apply plugin: 'signing'
apply plugin: 'com.github.sherter.google-java-format'
apply plugin: "com.github.johnrengelman.shadow"

mainClassName = 'dev.walgo.db2dto.Main'
ext.javaVersion = JavaVersion.VERSION_11

idea.module.downloadJavadoc = true
java {
  sourceCompatibility = javaVersion
  targetCompatibility = javaVersion
}



repositories {
    jcenter()
}

tasks.withType(JavaCompile) {
  options.encoding = 'UTF-8'
  options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Werror" << "-Xlint:all" << "-Xlint:-processing"
}

checkstyle {
  configFile file("checkstyle.xml")
  toolVersion '8.26';
}

tasks.withType(Checkstyle) {
// Specify all files that should be checked
  classpath = files()
  source "${project.rootDir}"

// Define the output folder of the generated reports
  reports {
    html {
      enabled true
      destination rootProject.file("build/reports/checkstyle/checkstyle.html")
    }
    xml {
      enabled true
      destination rootProject.file("build/reports/checkstyle/checkstyle.xml")
    }
  }
}
// Execute Checkstyle on all files
task checkstyle(type: Checkstyle) {
}

task checkstyleChanged(type: Checkstyle) {
    def changedFiles = System.getProperty('changedFiles', '').split(',')
    include changedFiles
}

task checkChanged {
  dependsOn checkstyleChanged
}

dependencies {

// https://mvnrepository.com/artifact/org.projectlombok/lombok
  compileOnly "org.projectlombok:lombok:${lombokVersion}"
  annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
  testImplementation "org.projectlombok:lombok:${lombokVersion}"
  testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

// https://mvnrepository.com/artifact/com.google.guava/guava
  implementation "com.google.guava:guava:${guavaVersion}"

// https://mvnrepository.com/artifact/commons-cli/commons-cli
  implementation "commons-cli:commons-cli:${commonsCliVersion}"

  implementation "io.pebbletemplates:pebble:${pebbleVersion}"

  implementation "org.slf4j:slf4j-api:${slf4jVersion}"
// https://mvnrepository.com/artifact/ch.qos.logback/logback-classic
  implementation "ch.qos.logback:logback-classic:${logbackVersion}"
// https://mvnrepository.com/artifact/ch.qos.logback/logback-core
  implementation "ch.qos.logback:logback-core:${logbackVersion}"

// https://mvnrepository.com/artifact/com.google.code.gson/gson
  implementation "com.google.code.gson:gson:${gsonVersion}"

  implementation group: 'dev.walgo', name: 'walib', version: '0.4.0'

  testImplementation  'junit:junit:4.13.2'
  
// https://mvnrepository.com/artifact/org.hsqldb/hsqldb
  testImplementation group: 'org.hsqldb', name: 'hsqldb', version: '2.5.1'
// https://mvnrepository.com/artifact/org.hsqldb/sqltool
  testImplementation group: 'org.hsqldb', name: 'sqltool', version: '2.5.1'

}

task copyResources(type: Copy) {
  destinationDir = file('./build/libs')
  from('./resources')
}



def pomContent = {
  name "${project.group}:${project.name}"
  description project.description
  url = 'https://github.com/wwalery/db2dto'
  groupId project.group
  artifactId project.name
  version project.version
  inceptionYear '2020'
  packaging 'jar'
  licenses {
    license {
      name 'The Apache Software License, Version 2.0'
      url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
      distribution 'repo'
    }
  }
  developers {
    developer {
      id = 'walery'
      name = 'Walery Wysotsky'
      email = 'dev@wysotsky.info'
    }
  }
  scm {
    connection = 'scm:git:git://github.com:wwalery/db2dto.git'
    developerConnection = 'scm:git:ssh://github.com:wwalery/db2dto.git'
    url = 'https://github.com/wwalery/db2dto/tree/master'
  }
}


task pom {
  doLast {
    pom { project pomContent }.writeTo("pom.xml")
  }
}


task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc
}

task sourcesJar(type: Jar) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

artifacts {
  archives javadocJar, sourcesJar
}

shadowJar {
  dependsOn copyResources
//  baseName = name
  classifier = ''
}

signing {
    sign publishing.publications
}

//signing {
//  sign configurations.archives
//}


test {
  testLogging {
    events /*"passed", */ "skipped", "failed"
//    events "started", "passed", "skipped", "failed"
    exceptionFormat = 'full'
    showStandardStreams = true
  }
  afterSuite { desc, result ->
    if (!desc.parent) { // will match the outermost suite
      println "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
    }
  }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            artifact sourcesJar
            artifact javadocJar
        
            pom {
                packaging = "jar"
                name.set("DB2DTO")
                url.set("https://github.com/wwalery/db2dto")
                description.set("Flexible DTO Java classes generator. Generate classes from database metadata (schema)")
            
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                scm {
                    connection.set("scm:https://github.com/wwalery/db2dto.git")
                    developerConnection.set("scm:git@github.com:wwalery/db2dto.git")
                    url.set("https://github.com/wwalery/db2dto")
                }
                developers {
                    developer {
                        id = 'wwalery'
                        name = 'Valerii Vysotskyi'
                        email = 'dev@wysotsky.info'
                    }
                }
            }

        }
    }
    repositories {
        maven {
            url "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

